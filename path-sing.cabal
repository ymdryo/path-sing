cabal-version:      2.4
name:               path-sing
version:            0.1.0.0

-- A short (one-line) description of the package.
synopsis: A singleton wrapper for the `path` library.

-- A longer description of the package.
description: This library wraps the types in the `path` library with singleton types to allow more well-typed handling of file and directory paths.

-- A URL where users can report bugs.
bug-reports: https://github.com/ymdryo/path-sing

-- The license under which the package is released.
license:            LGPL-3.0-or-later
author:             Yamada Ryo <ymdfield@outlook.jp>
maintainer:         Yamada Ryo <ymdfield@outlook.jp>

-- A copyright notice.
copyright: 2023 Yamada Ryo
category: System, Filesystem, Dependent Types

extra-source-files:
    ChangeLog.md
    README.md

library
    exposed-modules:
        Path.Sing

    -- Modules included in this executable, other than Main.
    -- other-modules:

    -- LANGUAGE extensions used by modules in this package.
    -- other-extensions:
    build-depends:
        base                          ^>= 4.15.1.0,
        hashable                      >= 1.4.3 && < 1.5,
        path                          >= 0.9.2 && < 0.10,

    hs-source-dirs:   src
    ghc-options:      -Wall
    default-language: Haskell2010

    default-extensions:
        BangPatterns,
        BinaryLiterals,
        ConstraintKinds,
        DataKinds,
        DefaultSignatures,
        DeriveDataTypeable,
        DeriveFoldable,
        DeriveFunctor,
        DeriveGeneric,
        DeriveTraversable,
        DoAndIfThenElse,
        EmptyDataDecls,
        ExistentialQuantification,
        FlexibleContexts,
        FlexibleInstances,
        FunctionalDependencies,
        GADTs,
        GeneralizedNewtypeDeriving,
        InstanceSigs,
        KindSignatures,
        LambdaCase,
        MultiParamTypeClasses,
        MultiWayIf,
        NamedFieldPuns,
        OverloadedStrings,
        PartialTypeSignatures,
        PatternGuards,
        PolyKinds,
        RankNTypes,
        RecordWildCards,
        ScopedTypeVariables,
        StandaloneDeriving,
        TupleSections,
        TypeFamilies,
        TypeSynonymInstances,
        ViewPatterns,
        TypeApplications,
        BlockArguments,
        DerivingVia,
        ImportQualifiedPost,
        TemplateHaskell,
        TypeOperators,
        QuantifiedConstraints,
        EmptyCase
